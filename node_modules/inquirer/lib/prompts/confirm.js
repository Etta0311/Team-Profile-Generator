'use strict';
/**
 * `confirm` type prompt
 */

<<<<<<< HEAD
const _ = {
  extend: require('lodash/extend'),
  isBoolean: require('lodash/isBoolean'),
};
const chalk = require('chalk');
const { take, takeUntil } = require('rxjs/operators');
const Base = require('./base');
const observe = require('../utils/events');
=======
var _ = require('lodash');
var chalk = require('chalk');
var { take, takeUntil } = require('rxjs/operators');
var Base = require('./base');
var observe = require('../utils/events');
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab

class ConfirmPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

<<<<<<< HEAD
    let rawDefault = true;

    _.extend(this.opt, {
      filter(input) {
        let value = rawDefault;
=======
    var rawDefault = true;

    _.extend(this.opt, {
      filter: function(input) {
        var value = rawDefault;
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
        if (input != null && input !== '') {
          value = /^y(es)?/i.test(input);
        }

        return value;
<<<<<<< HEAD
      },
=======
      }
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
    });

    if (_.isBoolean(this.opt.default)) {
      rawDefault = this.opt.default;
    }

    this.opt.default = rawDefault ? 'Y/n' : 'y/N';
<<<<<<< HEAD
=======

    return this;
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb   Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
<<<<<<< HEAD
    const events = observe(this.rl);
=======
    var events = observe(this.rl);
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
    events.keypress.pipe(takeUntil(events.line)).forEach(this.onKeypress.bind(this));

    events.line.pipe(take(1)).forEach(this.onEnd.bind(this));

    // Init
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {ConfirmPrompt} self
   */

  render(answer) {
<<<<<<< HEAD
    let message = this.getQuestion();
=======
    var message = this.getQuestion();
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab

    if (typeof answer === 'boolean') {
      message += chalk.cyan(answer ? 'Yes' : 'No');
    } else {
      message += this.rl.line;
    }

    this.screen.render(message);

    return this;
  }

  /**
   * When user press `enter` key
   */

  onEnd(input) {
    this.status = 'answered';

<<<<<<< HEAD
    const output = this.opt.filter(input);
=======
    var output = this.opt.filter(input);
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
    this.render(output);

    this.screen.done();
    this.done(output);
  }

  /**
   * When user press a key
   */

  onKeypress() {
    this.render();
  }
}

module.exports = ConfirmPrompt;
