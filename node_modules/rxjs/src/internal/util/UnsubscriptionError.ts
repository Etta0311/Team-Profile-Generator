<<<<<<< HEAD
import { createErrorClass } from './createErrorClass';

=======
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
export interface UnsubscriptionError extends Error {
  readonly errors: any[];
}

export interface UnsubscriptionErrorCtor {
<<<<<<< HEAD
  /**
   * @deprecated Internal implementation detail. Do not construct error instances.
   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269
   */
  new (errors: any[]): UnsubscriptionError;
}

=======
  new(errors: any[]): UnsubscriptionError;
}

const UnsubscriptionErrorImpl = (() => {
  function UnsubscriptionErrorImpl(this: any, errors: any[]) {
    Error.call(this);
    this.message = errors ?
      `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\n  ')}` : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
    return this;
  }

  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);

  return UnsubscriptionErrorImpl;
})();

>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
<<<<<<< HEAD
export const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(
  (_super) =>
    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {
      _super(this);
      this.message = errors
        ? `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\n  ')}`
        : '';
      this.name = 'UnsubscriptionError';
      this.errors = errors;
    }
);
=======
export const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
