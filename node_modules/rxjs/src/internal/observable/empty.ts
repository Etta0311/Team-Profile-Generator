import { Observable } from '../Observable';
import { SchedulerLike } from '../types';

/**
 * The same Observable instance returned by any call to {@link empty} without a
<<<<<<< HEAD
 * `scheduler`. It is preferable to use this over `empty()`.
 *
 * <span class="informal">Just emits 'complete', and nothing else.</span>
 *
 * ![](empty.png)
 *
 * ## Examples
 *
 * ### Log complete notification
 *
 * ```ts
 * import { EMPTY } from 'rxjs';
 *
 * EMPTY.subscribe({
 *   next: () => console.log('Next'),
 *   complete: () => console.log('Complete!')
 * });
 *
 * // Outputs
 * // Complete!
 * ```
 */
export const EMPTY = new Observable<never>((subscriber) => subscriber.complete());
=======
 * `scheduler`. It is preferrable to use this over `empty()`.
 */
export const EMPTY = new Observable<never>(subscriber => subscriber.complete());
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab

/**
 * Creates an Observable that emits no items to the Observer and immediately
 * emits a complete notification.
 *
<<<<<<< HEAD
 * <span class="informal">Just emits 'complete', and nothing else.</span>
=======
 * <span class="informal">Just emits 'complete', and nothing else.
 * </span>
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 *
 * ![](empty.png)
 *
 * This static operator is useful for creating a simple Observable that only
 * emits the complete notification. It can be used for composing with other
 * Observables, such as in a {@link mergeMap}.
 *
 * ## Examples
<<<<<<< HEAD
 *
 * ### Emit the number 7, then complete
 *
=======
 * ### Emit the number 7, then complete
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 * ```ts
 * import { empty } from 'rxjs';
 * import { startWith } from 'rxjs/operators';
 *
 * const result = empty().pipe(startWith(7));
 * result.subscribe(x => console.log(x));
<<<<<<< HEAD
 *
 * // Outputs
 * // 7
 * ```
 *
 * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'
 *
=======
 * ```
 *
 * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 * ```ts
 * import { empty, interval, of } from 'rxjs';
 * import { mergeMap } from 'rxjs/operators';
 *
 * const interval$ = interval(1000);
 * const result = interval$.pipe(
 *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following to the console:
<<<<<<< HEAD
 * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1, print a, b, c (each on its own)
 * // if x % 2 is not equal to 1, nothing will be output
=======
 * // x is equal to the count on the interval eg(0,1,2,3,...)
 * // x will occur every 1000ms
 * // if x % 2 is equal to 1 print abc
 * // if x % 2 is not equal to 1 nothing will be output
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 * ```
 *
 * @see {@link Observable}
 * @see {@link never}
 * @see {@link of}
 * @see {@link throwError}
 *
 * @param scheduler A {@link SchedulerLike} to use for scheduling
 * the emission of the complete notification.
 * @return An "empty" Observable: emits only the complete
 * notification.
<<<<<<< HEAD
 * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.
=======
 * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 */
export function empty(scheduler?: SchedulerLike) {
  return scheduler ? emptyScheduled(scheduler) : EMPTY;
}

function emptyScheduled(scheduler: SchedulerLike) {
<<<<<<< HEAD
  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));
=======
  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
}
