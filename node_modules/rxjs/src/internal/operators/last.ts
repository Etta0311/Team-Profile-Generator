import { Observable } from '../Observable';
<<<<<<< HEAD
import { EmptyError } from '../util/EmptyError';
import { OperatorFunction, TruthyTypesOf } from '../types';
=======
import { Operator } from '../Operator';
import { Subscriber } from '../Subscriber';
import { EmptyError } from '../util/EmptyError';
import { OperatorFunction } from '../../internal/types';
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
import { filter } from './filter';
import { takeLast } from './takeLast';
import { throwIfEmpty } from './throwIfEmpty';
import { defaultIfEmpty } from './defaultIfEmpty';
import { identity } from '../util/identity';

<<<<<<< HEAD
export function last<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;
export function last<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;
export function last<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;
=======
/* tslint:disable:max-line-length */
export function last<T, D = T>(
  predicate?: null,
  defaultValue?: D
): OperatorFunction<T, T | D>;
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
export function last<T, S extends T>(
  predicate: (value: T, index: number, source: Observable<T>) => value is S,
  defaultValue?: S
): OperatorFunction<T, S>;
export function last<T, D = T>(
  predicate: (value: T, index: number, source: Observable<T>) => boolean,
  defaultValue?: D
): OperatorFunction<T, T | D>;
<<<<<<< HEAD
=======
/* tslint:enable:max-line-length */
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab

/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * ![](last.png)
 *
<<<<<<< HEAD
 * It will throw an error if the source completes without notification or one that matches the predicate. It
 * returns the last value or if a predicate is provided last value that matches the predicate. It returns the
 * given default value if no notification is emitted or matches the predicate.
 *
 * ## Example
 * Last alphabet from the sequence.
 * ```ts
 * import { from } from 'rxjs';
 * import { last } from 'rxjs/operators';
 *
 * const source = from(['x', 'y', 'z']);
 * const example = source.pipe(last());
 * //output: "Last alphabet: z"
 * example.subscribe(val => console.log(`Last alphabet: ${val}`));
 * ```
 *
 * Default value when the value in the predicate is not matched.
 * ```ts
 * import { from } from 'rxjs';
 * import { last } from 'rxjs/operators';
 *
 * const source = from(['x', 'y', 'z']);
 * const example = source.pipe(last(char => char === 'a','not exist'));
 * //output: "'a' is not exist."
 * example.subscribe(val => console.log(`'a' is ${val}.`));
 * ```
 *
 * @see {@link skip}
 * @see {@link skipUntil}
 * @see {@link skipLast}
 * @see {@link skipWhile}
 *
=======
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} [predicate] - The condition any source emitted item has to satisfy.
 * @param {any} [defaultValue] - An optional default value to provide if last
 * predicate isn't met or no values were emitted.
<<<<<<< HEAD
 * @return A function that returns an Observable that emits only the last item
 * satisfying the given condition from the source, or a NoSuchElementException
 * if no such items are emitted.
=======
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 */
export function last<T, D>(
  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,
  defaultValue?: D
): OperatorFunction<T, T | D> {
  const hasDefaultValue = arguments.length >= 2;
<<<<<<< HEAD
  return (source: Observable<T>) =>
    source.pipe(
      predicate ? filter((v, i) => predicate(v, i, source)) : identity,
      takeLast(1),
      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())
    );
=======
  return (source: Observable<T>) => source.pipe(
    predicate ? filter((v, i) => predicate(v, i, source)) : identity,
    takeLast(1),
    hasDefaultValue ? defaultIfEmpty<T | D>(defaultValue) : throwIfEmpty(() => new EmptyError()),
  );
>>>>>>> ba354fa661b4c6906c0342221d686a312a23a3ab
}
